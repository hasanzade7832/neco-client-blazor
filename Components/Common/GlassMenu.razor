@using System.Linq
@using BlazorApp12.Models
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS

<style>
    .gm-row {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px 14px;
        cursor: pointer;
        border-left: 3px solid transparent;
        transition: background .15s ease,border-color .15s ease;
    }

        .gm-row:hover {
            background-color: rgba(37,99,235,.12);
            border-left-color: var(--mud-palette-primary,#2563EB);
        }

        .gm-row.smallpad {
            padding: 8px 14px;
        }

    .gm-sep {
        height: 1px;
        background: rgba(0,0,0,.08);
        margin: 0 12px;
    }
</style>

@if (Show)
{
    <div @ref="_portalRoot">
        <div style="position:fixed;inset:0;z-index:99998;background:transparent;" @onclick="@( (MouseEventArgs e) => HandleBackdrop() )"></div>
        <div style="@ContainerStyle">
            @if (UseCheckboxes)
            {
                <div class="gm-row" style="padding:10px 12px;border-bottom:3px solid #000;">
                    <GlassCheck Label="@HeaderTitle"
                                TriState="true"
                                Dense="true"
                                Value="@HeaderTri"
                                ValueChanged="@(v => OnHeaderTriChanged(v))" />
                </div>
            }

            <OrgScrollHost MaxHeight="@MaxHeight" Style="@($"padding:8px 0;min-width:{MinWidth};")">
                @if (!UseCheckboxes)
                {
                    @foreach (var item in Items)
                    {
                        <div class="gm-row" @onclick="@( (MouseEventArgs e) => HandleItemClick(item.Text) )">
                            <MudIcon Icon="@item.Icon" />
                            <div style="flex:1;font-weight:600;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">@item.Text</div>
                            @if (item.HasSubmenu)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.ChevronRight" Style="opacity:.55;" />
                            }
                        </div>
                        @if (!item.Equals(Items.Last()))
                        {
                            <div class="gm-sep"></div>
                        }
                    }
                }
                else
                {
                    @foreach (var p in PropertyItems)
                    {
                        <div class="gm-row smallpad" style="cursor:default;">
                            <GlassCheck Label="@p.Text"
                                        Dense="true"
                                        Value="@((bool?)p.Checked)"
                                        ValueChanged="@( (bool? v) => OnPropertyCheckboxChanged(p, v == true) )" />
                        </div>
                        @if (p != PropertyItems.Last())
                        {
                            <div class="gm-sep"></div>
                        }
                    }
                }
            </OrgScrollHost>
        </div>
    </div>
}

@code {
    [Parameter] public IEnumerable<MenuItemModel> Items { get; set; } = Array.Empty<MenuItemModel>();
    [Parameter] public List<PropertyItemModel> PropertyItems { get; set; } = new();
    [Parameter] public bool UseCheckboxes { get; set; }
    [Parameter] public bool HeaderCheckbox { get; set; }
    [Parameter] public string HeaderTitle { get; set; } = "Select All";
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }
    [Parameter] public double Left { get; set; }
    [Parameter] public double Top { get; set; }
    [Parameter] public string MinWidth { get; set; } = "240px";
    [Parameter] public string MaxHeight { get; set; } = "320px";
    [Parameter] public EventCallback<string> OnItemClick { get; set; }
    [Parameter] public EventCallback<PropertyItemModel> OnPropertyToggled { get; set; }
    [Parameter] public EventCallback<bool> OnToggleAll { get; set; }

    private ElementReference _portalRoot;

    private string ContainerStyle =>
        $"position:fixed;left:{Left}px;top:{Top}px;z-index:99999;" +
        "background:rgba(120,120,120,.18);backdrop-filter:blur(8px);-webkit-backdrop-filter:blur(8px);" +
        "border-radius:12px;border:1px solid rgba(255,255,255,.35);box-shadow:0 8px 24px rgba(0,0,0,.25);";

    private bool AllChecked => PropertyItems.Count > 0 && PropertyItems.All(x => x.Checked);
    private bool AnyChecked => PropertyItems.Any(x => x.Checked);
    private bool? HeaderTri => AllChecked ? true : (!AnyChecked ? false : (bool?)null);

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (Show)
            await JS.InvokeVoidAsync("gm_portalToBody", _portalRoot);
    }

    private Task HandleBackdrop()
    {
        if (ShowChanged.HasDelegate)
            return ShowChanged.InvokeAsync(false);
        return Task.CompletedTask;
    }

    private Task HandleItemClick(string text)
    {
        if (OnItemClick.HasDelegate)
            return OnItemClick.InvokeAsync(text);
        return Task.CompletedTask;
    }

    private void OnHeaderTriChanged(bool? value)
    {
        if (value == true)
        {
            foreach (var i in PropertyItems) i.Checked = true;
            if (OnToggleAll.HasDelegate) OnToggleAll.InvokeAsync(true);
        }
        else if (value == false)
        {
            foreach (var i in PropertyItems) i.Checked = false;
            if (OnToggleAll.HasDelegate) OnToggleAll.InvokeAsync(false);
        }
        StateHasChanged();
    }

    private void OnPropertyCheckboxChanged(PropertyItemModel item, bool value)
    {
        item.Checked = value;
        if (OnPropertyToggled.HasDelegate)
            OnPropertyToggled.InvokeAsync(item);
        StateHasChanged();
    }
}

<script>
    window.gm_portalToBody = function (el) {
        if (!el) return;
        if (el.parentElement !== document.body) document.body.appendChild(el);
    };
</script>
