@typeparam TItem
@using MudBlazor
@using System.Reflection
@namespace BlazorApp12.Components

<MudPaper Class="mud-elevation-0 d-flex flex-column h-100">
    @if (Items is null)
    {
        <MudProgressCircular Indeterminate Size="Size.Large" Class="m-auto" />
    }
    else
    {
        <MudDataGrid T="TItem"
                     Items="@Items"                 
                     Style="height:100%;"           
                     Class="flex-grow-1"
                     Filterable="true"
                     MultiSelection="true"
                     SortMode="SortMode.Multiple"
                     QuickFilter="@QuickFilter"
                     AutoGenerateAllColumns="true"
                     RowClick="@RowClicked"
                     RowContextMenuClick="@RowRightClicked"
                     SelectedItemsChanged="@SelectedItemsChanged"
                     RowStyleFunc="@RowStyle">

            <ToolBarContent>
                <MudText Typo="Typo.h6">@Title</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString"
                              Immediate
                              Placeholder="جست‌وجو..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Class="mt-0" />
            </ToolBarContent>

            <PagerContent>
                <MudDataGridPager T="TItem" />
            </PagerContent>
        </MudDataGrid>

        @if (_events.Count > 0)
        {
            <MudExpansionPanels Class="mt-4">
                <MudExpansionPanel Text="نمایش رخدادها">
                    @foreach (var e in _events)
                    {
                        <MudText Typo="Typo.body2">@e</MudText>
                    }
                    <div class="d-flex">
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled"
                                   OnClick="@(() => _events.Clear())"
                                   Class="mt-3">پاک‌سازی</MudButton>
                    </div>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
</MudPaper>

@code {
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public Func<TItem, string>? RowColorFunc { get; set; }
    [Parameter] public string Title { get; set; } = "Data";

    private readonly List<string> _events = new();
    private string _searchString = string.Empty;

    private Func<TItem, bool> QuickFilter => item =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        foreach (PropertyInfo p in typeof(TItem).GetProperties())
        {
            var val = p.GetValue(item)?.ToString() ?? string.Empty;
            if (val.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        return false;
    };

    private string RowStyle(TItem item, int _)
    {
        if (RowColorFunc is null) return string.Empty;
        var color = RowColorFunc(item);
        return string.IsNullOrWhiteSpace(color) ? string.Empty : $"background-color:{color}";
    }

    private void RowClicked(DataGridRowClickEventArgs<TItem> a) =>
        _events.Insert(0, $"RowClick  idx={a.RowIndex}  data={System.Text.Json.JsonSerializer.Serialize(a.Item)}");

    private void RowRightClicked(DataGridRowClickEventArgs<TItem> a) =>
        _events.Insert(0, $"RowRightClick  idx={a.RowIndex}  data={System.Text.Json.JsonSerializer.Serialize(a.Item)}");

    private void SelectedItemsChanged(HashSet<TItem> s) =>
        _events.Insert(0, $"SelectedItemsChanged  count={s.Count}");
}
