@typeparam TItem
@using System.Reflection
@using Microsoft.AspNetCore.Components
@using MudBlazor

<MudDataGrid T="TItem"
             Items="@Items"
             Filterable="@EnableFilter"
             MultiSelection="@EnableMultiSelection"
             SortMode="SortMode.Multiple"
             QuickFilter="@FilterFunc"
             RowStyleFunc="@RowStyle"
             Dense="@Dense"
             Hover="@Hover"
             Striped="@Striped"
             Bordered="@Bordered"
             SelectedItemsChanged="@HandleSelectionChanged">

    <!-- نوار ابزار -->
    <ToolBarContent>
        @if (EnableSearch)
        {
            <MudTextField @bind-Value="_search"
                          Placeholder="@SearchPlaceholder"
                          Adornment="Adornment.Start"
                          Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Class="mt-0" />
        }
    </ToolBarContent>

    <!-- صفحه‌بندی -->
    <PagerContent>
        @if (EnablePagination)
        {
            <MudDataGridPager />
        }
    </PagerContent>
</MudDataGrid>

@code {
    /* ---------- پارامترها ---------- */
    [Parameter] public IEnumerable<TItem> Items { get; set; } = Enumerable.Empty<TItem>();

    [Parameter] public bool EnableSearch { get; set; } = true;
    [Parameter] public bool EnableFilter { get; set; } = true;
    [Parameter] public bool EnableMultiSelection { get; set; } = true;
    [Parameter] public bool EnablePagination { get; set; } = true;

    [Parameter] public bool Dense { get; set; }
    [Parameter] public bool Hover { get; set; }
    [Parameter] public bool Striped { get; set; }
    [Parameter] public bool Bordered { get; set; }

    [Parameter] public string SearchPlaceholder { get; set; } = "Search…";

    /// فیلتر دلخواه (اختیاری):  item, searchText → bool
    [Parameter] public Func<TItem, string, bool>? CustomQuickFilter { get; set; }

    /// استایل سطر دلخواه (اختیاری): item, rowIndex → css
    [Parameter] public Func<TItem, int, string>? RowStyleFunc { get; set; }

    [Parameter] public EventCallback<HashSet<TItem>> SelectedItemsChanged { get; set; }

    /* ---------- وضعیت داخلی ---------- */
    private string _search = string.Empty;

    /* ---------- فیلتر سریع ---------- */
    private bool FilterFunc(TItem item)
    {
        if (!EnableSearch) return true;

        if (CustomQuickFilter is not null)
            return CustomQuickFilter(item, _search);

        if (string.IsNullOrWhiteSpace(_search)) return true;

        foreach (var prop in typeof(TItem).GetProperties(BindingFlags.Instance | BindingFlags.Public))
        {
            var val = prop.GetValue(item);
            if (val is not null &&
                val.ToString()?.Contains(_search, StringComparison.OrdinalIgnoreCase) == true)
                return true;
        }
        return false;
    }

    /* ---------- استایل سطر ---------- */
    private string RowStyle(TItem item, int index) =>
        RowStyleFunc?.Invoke(item, index) ?? string.Empty;

    /* ---------- رویداد انتخاب ---------- */
    private Task HandleSelectionChanged(HashSet<TItem> items) =>
        SelectedItemsChanged.InvokeAsync(items);
}
