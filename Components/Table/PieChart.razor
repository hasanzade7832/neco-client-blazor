@using MudBlazor
@using MudBlazor.Utilities
@using System
@using System.Linq
@using System.Collections.Generic

<MudHidden Breakpoint="Breakpoint.SmAndDown">
    <div style="width:100%;max-width:560px;display:flex;align-items:flex-start;gap:16px;justify-content:center;margin:0 auto;">
        <div style="position:relative;width:260px;aspect-ratio:1/1;">
            <MudChart ChartType="ChartType.Pie"
                      InputData="Data"
                      InputLabels="EmptyLabels"
                      ChartOptions="ResolvedOptions"
                      Width="100%"
                      Height="100%" />
            @foreach (var s in PercentPositions)
            {
                <div style="position:absolute;left:@s.LeftPct;top:@s.TopPct;transform:translate(-50%,-50%);font-weight:700;font-size:12px;color:var(--mud-palette-text-primary);text-shadow:0 1px 2px rgba(0,0,0,.25);pointer-events:none;">@s.Text</div>
            }
        </div>

        <div style="display:flex;flex-direction:column;align-items:flex-start;row-gap:8px;min-width:220px;">
            <div style="display:flex;align-items:baseline;gap:8px;">
                <div style="font-weight:700;font-size:22px;color:var(--mud-palette-text-secondary);">Total</div>
                <div style="font-weight:700;font-size:18px;color:var(--mud-palette-text-secondary);">@Total</div>
            </div>

            <div style="margin-top:2px;width:100%;display:grid;grid-template-columns:12px 1fr max-content;column-gap:3px;row-gap:4px;align-items:center;">
                @for (int i = 0; i < LegendCount; i++)
                {
                    <span style="width:12px;height:12px;border-radius:50%;display:inline-block;background-color:@ResolvedPalette[i];"></span>
                    <span style="font-size:12px;color:var(--mud-palette-text-primary);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">@Labels[i]</span>
                    <span style="font-size:12px;color:var(--mud-palette-text-secondary);text-align:right;">@((int)Data[i])</span>
                }
            </div>
        </div>
    </div>
</MudHidden>

<MudHidden Breakpoint="Breakpoint.MdAndUp">
    <div style="width:100%;max-width:420px;display:flex;flex-direction:column;align-items:center;gap:10px;margin:0 auto;">
        <div style="position:relative;width:min(100%,240px);aspect-ratio:1/1;">
            <MudChart ChartType="ChartType.Pie"
                      InputData="Data"
                      InputLabels="EmptyLabels"
                      ChartOptions="ResolvedOptions"
                      Width="100%"
                      Height="100%" />
            @foreach (var s in PercentPositions)
            {
                <div style="position:absolute;left:@s.LeftPct;top:@s.TopPct;transform:translate(-50%,-50%);font-weight:700;font-size:12px;color:var(--mud-palette-text-primary);text-shadow:0 1px 2px rgba(0,0,0,.25);pointer-events:none;">@s.Text</div>
            }
        </div>

        <div style="display:flex;align-items:baseline;gap:8px;">
            <div style="font-weight:700;font-size:20px;color:var(--mud-palette-text-secondary);">Total</div>
            <div style="font-weight:700;font-size:16px;color:var(--mud-palette-text-secondary);">@Total</div>
        </div>

        <div style="width:min(100%,280px);display:grid;grid-template-columns:12px 1fr max-content;column-gap:3px;row-gap:4px;align-items:center;">
            @for (int i = 0; i < LegendCount; i++)
            {
                <span style="width:12px;height:12px;border-radius:50%;display:inline-block;background-color:@ResolvedPalette[i];"></span>
                <span style="font-size:12px;color:var(--mud-palette-text-primary);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">@Labels[i]</span>
                <span style="font-size:12px;color:var(--mud-palette-text-secondary);text-align:right;">@((int)Data[i])</span>
            }
        </div>
    </div>
</MudHidden>

@code {
    [Parameter] public double[] Data { get; set; }
    [Parameter] public string[] Labels { get; set; }
    [Parameter] public string[] Palette { get; set; }
    [Parameter] public bool IsDarkMode { get; set; }

    int LegendCount => Math.Min(Labels?.Length ?? 0, Data?.Length ?? 0);
    string[] EmptyLabels => Enumerable.Repeat("", Data?.Length ?? 0).ToArray();
    int Total => (int)Math.Round(Data?.Sum() ?? 0);

    static string Css(MudColor c) => c.ToString(MudColorOutputFormats.Hex);

    string[] ThemePaletteLight => new[]
    {
        AppThemes.KargardoonTheme.PaletteLight.Primary,
        AppThemes.KargardoonTheme.PaletteLight.Secondary,
        AppThemes.KargardoonTheme.PaletteLight.Info,
        AppThemes.KargardoonTheme.PaletteLight.Success,
        AppThemes.KargardoonTheme.PaletteLight.Warning,
        AppThemes.KargardoonTheme.PaletteLight.Error
    }.Select(Css).ToArray();

    string[] ThemePaletteDark => new[]
    {
        AppThemes.KargardoonTheme.PaletteDark.Primary,
        AppThemes.KargardoonTheme.PaletteDark.Secondary,
        AppThemes.KargardoonTheme.PaletteDark.Info,
        AppThemes.KargardoonTheme.PaletteDark.Success,
        AppThemes.KargardoonTheme.PaletteDark.Warning,
        AppThemes.KargardoonTheme.PaletteDark.Error
    }.Select(Css).ToArray();

    string[] DefaultPalette => IsDarkMode ? ThemePaletteDark : ThemePaletteLight;

    string[] ResolvedPalette => (Palette != null && Palette.Length > 0)
        ? Enumerable.Range(0, Data?.Length ?? 0).Select(i => Palette[i % Palette.Length]).ToArray()
        : Enumerable.Range(0, Data?.Length ?? 0).Select(i => DefaultPalette[i % DefaultPalette.Length]).ToArray();

    ChartOptions ResolvedOptions => new ChartOptions
        {
            ChartPalette = ResolvedPalette
        };

    class SliceLabelVM
    {
        public string Text { get; set; }
        public string LeftPct { get; set; }
        public string TopPct { get; set; }
    }

    IEnumerable<SliceLabelVM> PercentPositions
    {
        get
        {
            var list = new List<SliceLabelVM>();
            if (Data == null || Data.Length == 0) return list;
            var sum = Data.Sum();
            if (sum <= 0) return list;
            double baseSize = 200;
            double cx = baseSize / 2;
            double cy = baseSize / 2;
            double r = 65;
            double start = -Math.PI / 2;
            for (int i = 0; i < Data.Length; i++)
            {
                var val = Data[i];
                var sweep = (val / sum) * 2 * Math.PI;
                var mid = start + sweep / 2;
                var x = cx + r * Math.Cos(mid);
                var y = cy + r * Math.Sin(mid);
                var pct = Math.Round(val / sum * 100);
                var leftPct = (x / baseSize * 100).ToString("0.##") + "%";
                var topPct = (y / baseSize * 100).ToString("0.##") + "%";
                list.Add(new SliceLabelVM { Text = $"{pct:0}%", LeftPct = leftPct, TopPct = topPct });
                start += sweep;
            }
            return list;
        }
    }
}
