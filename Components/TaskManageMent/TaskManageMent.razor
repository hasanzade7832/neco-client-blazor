@* =======================
   TaskManageMent.razor
   ======================= *@
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using BlazorApp12.Models
@using BlazorApp12.Components

@if (Visible)
{
    <div class="tm-overlay" @onclick="CloseAsync" @onkeydown="OnKeyDown" tabindex="0" @ref="_overlayRef">
        <div class="tm-dialog @( _isClosing ? "closing" : null )"
             style="@PanelStyle"
             @onclick:stopPropagation="true">

            <!-- ===== Header ===== -->
            <div class="tm-header">
                <div class="tm-title">TaskManageMent</div>
                <div class="tm-actions">
                    <MudIconButton Icon="@(_maximized ? Icons.Material.Filled.FullscreenExit : Icons.Material.Filled.Fullscreen)"
                                   Class="tm-icon" Size="Size.Small" Variant="Variant.Text" OnClick="ToggleMaximize" />
                    <MudIconButton Icon="@Icons.Material.Filled.Close"
                                   Class="tm-icon" Size="Size.Small" Variant="Variant.Text" OnClick="CloseAsync" />
                </div>
            </div>

            <!-- ===== Body ===== -->
            <div class="tm-dialog-body">
                <div class="tm-rail-8lines">
                    <!-- Sidebar -->
                    <aside class="tm-sidebar">
                        <div class="tm-role-card">
                            <div class="tm-avatar">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="tm-avatar-icon" />
                            </div>
                            <div class="tm-role-caption">Role</div>
                        </div>
                    </aside>

                    <!-- Main -->
                    <main class="tm-main">
                        <div class="tm-main-headline">
                            Execute Related Text for Post for Issue and Fill in Form, Please.
                        </div>

                        <!-- ===== Execute Panel ===== -->
                        <div class="tm-exec-panel"
                             style="background:#d9d9د9!important;
                                    border:1px solid #b5b5b5!important;
                                    border-radius:4px; box-sizing:border-box;">

                            <!-- نیمهٔ چپ -->
                            <div class="tm-exec-left"
                                 style="background:#d9d9d9!important;border:none!important;padding:8px;display:flex;">
                                <div class="tm-left-stack" style="display:flex;flex-direction:column;gap:12px;width:100%;">
                                    <div class="tm-card" style="background:#d9d9d9!important;border:none!important;">
                                        <div class="tm-project-title">Project IV</div>
                                    </div>
                                    <div class="tm-card" style="background:#d9d9d9!important;border:none!important;display:flex;justify-content:center;">
                                        <MudButton Class="tm-action-btn" Variant="Variant.Filled" OnClick="@OpenActionsDialog">
                                            Action
                                        </MudButton>
                                    </div>
                                </div>
                            </div>

                            <!-- نیمهٔ راست -->
                            <div class="tm-exec-right"
                                 style="background:#d9d9d9!important;border:none!important;padding:8px;display:flex;">
                                <div class="tm-meta-list"
                                     style="display:flex;flex-direction:column;gap:8px;
                                            padding-left:8px;padding-top:6px;
                                            color:var(--tm-accent);font-weight:700;font-size:.95rem;">
                                    <div>Status</div>
                                    <div>Send Date</div>
                                    <div>Due Date</div>
                                    <div>Class</div>
                                </div>
                            </div>
                        </div>
                        <!-- ===== /Execute Panel ===== -->
                    </main>
                </div>

                <div class="tm-divider"></div>

                <!-- Bottom Icon Row -->
                <div class="tm-after-line">
                    <div class="tm-left-actions" style="cursor:pointer" @onclick="OpenMenu">
                        <MudIcon Icon="@Icons.Material.Filled.Menu" Class="tm-mini-icon" />
                    </div>
                    <div class="tm-right-actions">
                        <MudIcon Icon="@Icons.Material.Filled.Save"  Class="tm-mini-icon" />
                        <MudIcon Icon="@Icons.Material.Filled.Print" Class="tm-mini-icon" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- ===== GlassMenu ===== -->
    <GlassMenu Show="@_menuOpen"
               ShowChanged="@(v => _menuOpen = v)"
               Left="@_menuLeft"
               Top="@_menuTop"
               MinWidth="260px"
               MaxHeight="320px"
               Items="@_menuItems"
               OnItemClick="OnMenuItemClick" />

    <!-- ===== ActionsManagement Dialog ===== -->
    <BlazorApp12.Components.ActionsManagement
        Visible="@_actionsOpen"
        OnClose="CloseActionsDialog"
        MaximizedInitial="@_maximized" />
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public bool MaximizedInitial { get; set; } = true;

    private bool _maximized = true;
    private bool _isClosing = false;
    private ElementReference _overlayRef;

    // GlassMenu
    private bool _menuOpen;
    private double _menuLeft, _menuTop;

    // ActionsManagement
    private bool _actionsOpen;

    private List<MenuItemModel> _menuItems = new()
    {
        new() { Text = "Approval Flow",   Icon = Icons.Material.Filled.AccountTree },
        new() { Text = "Comments",        Icon = Icons.Material.Filled.Chat       },
        new() { Text = "Checklist",       Icon = Icons.Material.Filled.Checklist  },
        new() { Text = "Procedure",       Icon = Icons.Material.Filled.Article    },
        new() { Text = "Logs",            Icon = Icons.Material.Filled.ReceiptLong},
        new() { Text = "Lessoned Learned",Icon = Icons.Material.Filled.Lightbulb  },
        new() { Text = "Related Records", Icon = Icons.Material.Filled.Link       },
    };

    protected override void OnParametersSet()
    {
        if (Visible) _maximized = MaximizedInitial;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Visible) { try { await _overlayRef.FocusAsync(); } catch { } }
    }

    private async Task CloseAsync()
    {
        if (_isClosing) return;
        _isClosing = true;
        await Task.Delay(180);
        _isClosing = false;
        await OnClose.InvokeAsync();
    }

    private void ToggleMaximize() => _maximized = !_maximized;

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape") await CloseAsync();
    }

    private string PanelStyle => _maximized
        ? "width:calc(100% - 32px);height:calc(100% - 32px);margin:16px;"
        : "width:50%;height:50%;min-width:480px;min-height:320px;";

    // GlassMenu handlers
    private void OpenMenu(MouseEventArgs e)
    {
        _menuLeft = e.ClientX + 6;
        _menuTop  = e.ClientY + 6;
        _menuOpen = true;
        StateHasChanged();
    }
    private Task OnMenuItemClick(string text)
    {
        _menuOpen = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    // Actions dialog handlers
    private void OpenActionsDialog() => _actionsOpen = true;
    private void CloseActionsDialog() => _actionsOpen = false;
}
