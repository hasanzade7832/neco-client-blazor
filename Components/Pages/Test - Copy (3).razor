@page "/test12"
@using MudBlazor
@using System.Linq

<style>
    /* کانتینر کلی */
    .wrapper {
        height: calc(100vh - 140px);
        display: flex;
        flex-direction: column;
        overflow: hidden;
        min-height: 0;
        padding: 8px 0;
    }

    /* دیتاگرید با namespace برای غیرفعال کردن تداخل‌های خارجی */
    .my-fixed-grid {
        flex: 1;
        display: flex;
        flex-direction: column;
        min-height: 0;
    }

        /* بدنه جدول باید اسکرول بخوره، ارتفاع ثابت نگه داشته شود */
        .my-fixed-grid.mud-data-grid .mud-table-container {
            flex: 1 1 auto;
            min-height: 0;
            overflow: auto;
            max-height: none !important;
        }

    /* اگر لازم شد ردیف سفید */
    .white-row {
        background-color: #ffffff !important;
    }

    /* مرکز کردن پیجر */
    .pager-center {
        display: flex;
        justify-content: center;
        width: 100%;
        padding: 4px 0;
    }
</style>

<div class="wrapper">
    <MudText Typo="Typo.subtitle2" Class="mb-2">
        Rows per page: @_rowsPerPage
    </MudText>

    <div style="flex:1; min-height:0; display:flex; flex-direction:column;">
        <MudDataGrid T="Element"
                     Items="@FilteredElements"
                     FixedHeader="true"
                     Class="my-fixed-grid"
                     RowClassFunc="@_rowClassFunc"
                     RowStyleFunc="@_rowStyleFunc"
                     Filterable="true"
                     FilterMode="DataGridFilterMode.Simple"
                     FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
                     SortMode="SortMode.Multiple"
                     Hideable="false"
                     Groupable="false"
                     @bind-CurrentPage="_page"
                     @bind-RowsPerPage="_rowsPerPage">

            <ToolBarContent>
                <MudText Typo="Typo.h6">Tasks</MudText>
                <MudSpacer />
                <MudTextField Value="_searchString"
                              Immediate="true"
                              ValueChanged="@( (string s) => { _searchString = s; _page = 0; } )"
                              Placeholder="Search"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Class="mt-0" />

            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Number" Title="Nr" Sortable="false" Filterable="true" />
                <PropertyColumn Property="x => x.Sign" Filterable="true" />
                <PropertyColumn Property="x => x.Name" FilterMode="DataGridFilterMode.ColumnFilterMenu" />
                <PropertyColumn Property="x => x.Position" Filterable="true" />
                <PropertyColumn Property="x => x.Molar" Title="Molar mass" Filterable="true" />
            </Columns>

            <PagerContent>
                <div class="pager-center">
                    <MudDataGridPager T="Element"
                                      @bind-CurrentPage="_page"
                                      @bind-RowsPerPage="_rowsPerPage"
                                      PageSizeOptions="new int[] { 10, 20, 30 }"
                                      RowsPerPageString="Rows per page" />
                </div>
            </PagerContent>
        </MudDataGrid>
    </div>
</div>

@code {
    private int _page = 0;
    private int _rowsPerPage = 10;

    private IEnumerable<Element> Elements = Enumerable
        .Range(1, 1000)
        .Select(i => new Element
            {
                Number = i,
                Sign = $"E{i:000}",
                Name = $"Element {i}",
                Position = ((i - 1) % 18) + 1,
                Molar = Math.Round(1.008 + i * 0.125 + ((i % 7) * 0.037), 3)
            });

    private string _searchString = string.Empty;

    private IEnumerable<Element> FilteredElements => Elements
        .Where(x =>
            string.IsNullOrWhiteSpace(_searchString) ||
            x.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            $"{x.Number} {x.Position} {x.Molar}".Contains(_searchString, StringComparison.OrdinalIgnoreCase)
        );

    private Func<Element, int, string> _rowStyleFunc => (_, i) => (i % 4) switch
    {
        0 => "background-color:rgba(var(--mud-palette-success-rgb),0.18);",
        1 => "background-color:rgba(255,255,255,1);",
        2 => "background-color:rgba(var(--mud-palette-warning-rgb),0.18);",
        _ => "background-color:rgba(var(--mud-palette-error-rgb),0.18);"
    };

    private Func<Element, int, string> _rowClassFunc => (_, i) => i % 4 == 1 ? "white-row" : null;

    public class Element
    {
        public int Number { get; set; }
        public string Sign { get; set; }
        public string Name { get; set; }
        public int Position { get; set; }
        public double Molar { get; set; }
    }
}
