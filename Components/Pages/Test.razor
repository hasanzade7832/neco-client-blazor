@page "/test"
@using System.Linq
@using MudBlazor

<style>
    /* کانتینر روت جدول — اجازه اسکرول عمودی تنها در صورت نیاز */
    .custom-table-wrapper {
        display: flex;
        flex-direction: column;
        flex: 1;
        min-height: 0;
        overflow-x: hidden;
        overflow-y: auto;
    }

    /* گرید داخلی — ارتفاع کامل و فلکس‌پذیر */
    .my-fixed-grid {
        display: flex;
        flex-direction: column;
        flex: 1;
        min-height: 0;
    }

        /* کانتینر جدول خودِ MudDataGrid */
        .my-fixed-grid .mud-table-container {
            flex: 1;
            overflow-y: auto;
            overflow-x: hidden;
        }

    /* مرکز کردن پیجینیشن */
    .pager-center {
        display: flex;
        justify-content: center;
        padding: 6px 0;
        gap: 8px;
    }
</style>

<div class="custom-table-wrapper">
    <div class="my-fixed-grid">
        <MudDataGrid T="Element"
                     Items="@FilteredElements"
                     FixedHeader="true"
                     RowClassFunc="@_rowClassFunc"
                     RowStyleFunc="@_rowStyleFunc"
                     Filterable="true"
                     FilterMode="DataGridFilterMode.Simple"
                     FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
                     SortMode="SortMode.Multiple"
                     Hideable="false"
                     Groupable="false"
                     @bind-CurrentPage="_page"
                     @bind-RowsPerPage="_rowsPerPage"
                     Virtualize="true"
                     Style="border: 1px solid rgba(0,0,0,0.2);
                        box-sizing: border-box;
                        border-radius: 6px;
                        height: 100%;">

            <ToolBarContent>
                <MudText Typo="Typo.h6">Tasks</MudText>
                <MudSpacer />

                <!-- اصلاح شده: حذف @bind-Value و استفاده از Value/ValueChanged/ValueExpression -->
                <MudTextField T="string"
                              Value="_searchString"
                              ValueChanged="@( (string s) => { _searchString = s; _page = 0; } )"
                              ValueExpression="() => _searchString"
                              Immediate="true"
                              Placeholder="Search"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              Class="mt-0" />
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Number" Title="Nr" Sortable="false" />
                <PropertyColumn Property="x => x.Sign" Title="Sign" />
                <PropertyColumn Property="x => x.Name" Title="Name" FilterMode="DataGridFilterMode.ColumnFilterMenu" />
                <PropertyColumn Property="x => x.Position" Title="Position" />
                <PropertyColumn Property="x => x.Molar" Title="Molar mass" />
            </Columns>

            <PagerContent>
                <div class="pager-center">
                    <MudDataGridPager T="Element"
                                      @bind-CurrentPage="_page"
                                      @bind-RowsPerPage="_rowsPerPage"
                                      PageSizeOptions="new int[] { 10, 20, 30 }"
                                      RowsPerPageString="Rows per page" />
                </div>
            </PagerContent>

        </MudDataGrid>
    </div>
</div>

@code {
    private int _page = 0;
    private int _rowsPerPage = 10;
    private string _searchString = string.Empty;

    private IEnumerable<Element> Elements = Enumerable
      .Range(1, 1000)
      .Select(i => new Element
          {
              Number = i,
              Sign = $"E{i:000}",
              Name = $"Element {i}",
              Position = ((i - 1) % 18) + 1,
              Molar = Math.Round(1.008 + i * 0.125 + ((i % 7) * 0.037), 3)
          });

    private IEnumerable<Element> FilteredElements => Elements.Where(x =>
      string.IsNullOrWhiteSpace(_searchString) ||
      x.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
      x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
      $"{x.Number} {x.Position} {x.Molar}".Contains(_searchString, StringComparison.OrdinalIgnoreCase)
    );

    private Func<Element, int, string> _rowStyleFunc => (_, i) => (i % 4) switch
    {
        0 => "background-color:rgba(var(--mud-palette-success-rgb),0.18);",
        1 => "background-color:#ffffff;",
        2 => "background-color:rgba(var(--mud-palette-warning-rgb),0.18);",
        _ => "background-color:rgba(var(--mud-palette-error-rgb),0.18);"
    };

    private Func<Element, int, string> _rowClassFunc => (_, i) => i % 4 == 1 ? "white-row" : null;

    public class Element
    {
        public int Number { get; set; }
        public string Sign { get; set; }
        public string Name { get; set; }
        public int Position { get; set; }
        public double Molar { get; set; }
    }
}
