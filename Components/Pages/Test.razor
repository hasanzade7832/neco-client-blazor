@page "/test"
@using MudBlazor

<style>
    .mud-data-grid .mud-table-head,
    .mud-data-grid .mud-table-head .mud-th,
    .mud-data-grid .mud-table-head .mud-sort-label,
    .mud-data-grid .mud-table-head .mud-sort-label .mud-icon-root,
    .mud-data-grid .mud-table-head .mud-icon-button,
    .mud-data-grid .mud-table-head .mud-icon-root {
        color: var(--mud-palette-text-primary) !important;
        opacity: 1 !important;
    }

        .mud-data-grid .mud-table-head .mud-icon-button .mud-icon-root,
        .mud-data-grid .mud-table-head .mud-sort-label .mud-icon-root {
            color: var(--mud-palette-text-primary) !important;
            opacity: 1 !important;
        }

    .mud-data-grid .mud-table-body .mud-tr:hover {
        filter: brightness(0.98);
    }
</style>


<MudDataGrid @ref="DataGrid"
             T="Item"
             Items="@_items"
             SortMode="SortMode.Multiple"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
             Hover="true"
             Bordered="true"
             RowStyleFunc="@_rowStyleFunc"
             PageSize="@_pageSize"
             @bind-Page="_page">

    <Columns>
        <PropertyColumn Property="x => x.Name"
                        Title="Name"
                        Sortable="true"
                        Comparer="@(new MudBlazor.Utilities.NaturalComparer())" />
        <PropertyColumn Property="x => x.Value"
                        Title="Value"
                        Sortable="true" />
        <PropertyColumn Property="x => x.Misc"
                        Title="Misc"
                        Sortable="true" />
    </Columns>

    <PagerContent>
        <MudDataGridPager T="Item"
                          PageSize="@_pageSize"
                          PageSizeOptions="new int[]{5,10,25,50}"
                          RowsPerPageString="ردیف در صفحه" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<Item> DataGrid;
    private int _page = 0;
    private int _pageSize = 5;

    private IEnumerable<Item> _items = new List<Item>()
    {
        new Item("1", 42, "555"),
        new Item("10", 73, "7"),
        new Item("2", 11, "4444"),
        new Item("1_10", 33, "33333"),
        new Item("1_2", 99, "66"),
        new Item("1_11", 44, "1111111"),
        new Item("0", 55, "222222")
    };

    private Func<Item, int, string> _rowStyleFunc => (x, i) =>
    {
        if ((i + 1) % 4 == 0)
            return "background-color:#FFFFFF;color:#0F172A";
        if (x.Value >= 70)
            return "background-color:rgba(var(--mud-palette-success-rgb),0.18);color:var(--mud-palette-text-primary)";
        if (x.Value >= 40)
            return "background-color:rgba(var(--mud-palette-warning-rgb),0.18);color:var(--mud-palette-text-primary)";
        return "background-color:rgba(var(--mud-palette-error-rgb),0.18);color:var(--mud-palette-text-primary)";
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && DataGrid is not null)
        {
            await DataGrid.SetSortAsync(nameof(Item.Name),
                                        SortDirection.Ascending,
                                        x => x.Name,
                                        new MudBlazor.Utilities.NaturalComparer());
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public class Item
    {
        public string Name { get; set; }
        public int Value { get; set; }
        public string Misc { get; set; }

        public Item(string name, int value, string misc)
        {
            Name = name;
            Value = value;
            Misc = misc;
        }
    }
}
