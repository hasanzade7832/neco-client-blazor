@using MudBlazor
@using BlazorApp12.Models
@using Microsoft.AspNetCore.Components.Web

<div style="@($"flex:0 0 {(Collapsed ? CollapsedWidth : ExpandedWidth)}px;width:{(Collapsed ? CollapsedWidth : ExpandedWidth)}px;display:flex;flex-direction:column;border-radius:12px;overflow:hidden;position:relative;background-color:{BackgroundCss};transition:width .25s ease,flex-basis .25s ease;")">
    @if (!Collapsed)
    {
        <div style="display:flex;justify-content:space-between;align-items:center;padding:8px 12px;">
            <div style="font-weight:600;font-size:1rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">@Title</div>
            <div style="display:flex;align-items:center;gap:8px;">
                <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft"
                               OnClick="Toggle"
                               Style="color:var(--mud-palette-text-primary);font-size:24px;" />
                <MudIconButton Icon="@Icons.Material.Filled.MoreHoriz"
                               Style="font-size:22px;color:var(--mud-palette-text-primary);margin:0;padding:4px;"
                               OnClick="@(e=>OpenHeaderMenu(e))" />
            </div>
        </div>

        <OrgScrollHost Style="flex:1;padding:0 8px 12px;box-sizing:border-box;height:100%;">
            @{
                var list = Items?.ToList() ?? new();
                for (int i = 0; i < list.Count; i++)
                {
                    var handler = (GlassOnSecond && i == 1)
                    ? EventCallback.Factory.Create<MouseEventArgs>(this, OpenOverlay)
                    : EventCallback<MouseEventArgs>.Empty;

                    <TaskCard Item="list[i]" MenuClicked="handler" />
                }
            }
        </OrgScrollHost>
    }
    else
    {
        <div style="position:absolute;top:6px;right:6px;">
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight"
                           OnClick="Toggle"
                           Style="color:var(--mud-palette-text-primary);font-size:24px;" />
        </div>
        <div style="flex:1;display:flex;align-items:center;justify-content:center;">
            <div style="transform:rotate(-90deg);font-weight:700;font-size:1.1rem;color:rgba(0,0,0,.55);letter-spacing:.5px;white-space:nowrap;">@Title</div>
        </div>
    }
</div>

<GlassMenu Items="@CardMenuItems"
           Show="@_overlayOpen"
           ShowChanged="@(v=>_overlayOpen=v)"
           Left="@_overlayX"
           Top="@_overlayY"
           OnItemClick="OnCardMenuItem" />

<GlassMenu Items="@HeaderMenuItems"
           Show="@_headerMenuOpen"
           ShowChanged="@(v=>_headerMenuOpen=v)"
           Left="@_headerX"
           Top="@_headerY"
           MaxHeight="260px"
           OnItemClick="OnHeaderMenuItem" />

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public IEnumerable<TaskItem> Items { get; set; } = Array.Empty<TaskItem>();
    [Parameter] public bool Collapsed { get; set; }
    [Parameter] public EventCallback<bool> CollapsedChanged { get; set; }
    [Parameter] public string BackgroundCss { get; set; } = "var(--mud-palette-action-default)";
    [Parameter] public int ExpandedWidth { get; set; } = 280;
    [Parameter] public int CollapsedWidth { get; set; } = 64;
    [Parameter] public bool GlassOnSecond { get; set; }

    private bool _overlayOpen;
    private double _overlayX;
    private double _overlayY;

    private bool _headerMenuOpen;
    private double _headerX;
    private double _headerY;

    private readonly List<MenuItemModel> CardMenuItems = new()
    {
        new MenuItemModel(Icons.Material.Filled.SubdirectoryArrowRight,"Follow Up"),
        new MenuItemModel(Icons.Material.Filled.Notifications,"Alert"),
        new MenuItemModel(Icons.Material.Filled.DoubleArrow,"Expedite"),
        new MenuItemModel(Icons.Material.Filled.Groups,"Consult"),
        new MenuItemModel(Icons.Material.Filled.ChangeCircle,"Reassign")
    };

    private readonly List<MenuItemModel> HeaderMenuItems = new()
    {
        new MenuItemModel(Icons.Material.Filled.Tune,"Properties"),
        new MenuItemModel(Icons.Material.Filled.Sort,"Sort")
    };

    private void Toggle() => CollapsedChanged.InvokeAsync(!Collapsed);

    private void OpenOverlay(MouseEventArgs e)
    {
        _overlayX = e.ClientX + 12;
        _overlayY = e.ClientY + 10;
        _overlayOpen = true;
        _headerMenuOpen = false;
        StateHasChanged();
    }

    private void OpenHeaderMenu(MouseEventArgs e)
    {
        _headerX = e.ClientX + 8;
        _headerY = e.ClientY + 8;
        _headerMenuOpen = true;
        _overlayOpen = false;
        StateHasChanged();
    }

    private Task OnCardMenuItem(string key) => Task.CompletedTask;
    private Task OnHeaderMenuItem(string key) => Task.CompletedTask;
}
