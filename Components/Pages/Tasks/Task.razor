@page "/tasks"
@using MudBlazor
@using BlazorApp12.Models
@using Microsoft.AspNetCore.Components.Web
@inject IDialogService DialogService

<style>
    .task-scroll {
        scrollbar-width: thin;
        scrollbar-color: var(--mud-palette-primary,#2563EB) transparent
    }

        .task-scroll::-webkit-scrollbar {
            width: 10px;
            height: 10px
        }

        .task-scroll::-webkit-scrollbar-track {
            background: transparent
        }

        .task-scroll::-webkit-scrollbar-thumb {
            background-color: var(--mud-palette-primary,#2563EB);
            border-radius: 8px;
            border: 2px solid transparent;
            background-clip: content-box;
            box-shadow: 0 1px 2px rgba(0,0,0,.2) inset
        }

            .task-scroll::-webkit-scrollbar-thumb:hover {
                filter: brightness(.9)
            }

    .dlg-blur {
        backdrop-filter: blur(10px)
    }
</style>

<div style="height:100%;display:flex;flex-direction:column;gap:8px;overflow:hidden;">
    <div class="task-scroll" style="display:flex;align-items:center;gap:16px;padding:4px 12px;overflow-x:auto;flex:0 0 auto;">
        <MudImage Src="Images/Icons/Task/Picture1.png" Alt="Picture1" Width="32" Height="32" />
        <MudImage Src="Images/Icons/Task/Picture2.png" Alt="Picture2" Width="32" Height="32" />
        <MudImage Src="Images/Icons/Task/Picture3.png" Alt="Picture3" Width="32" Height="32" />
        <MudImage Src="Images/Icons/Task/Picture4.png" Alt="Picture4" Width="32" Height="32" />
        <MudImage Src="Images/Icons/Task/Picture5.png" Alt="Picture5" Width="32" Height="32" />
        <MudImage Src="Images/Icons/Task/Picture6.png" Alt="Picture6" Width="32" Height="32" />
        <div style="width:1px;height:32px;background-color:rgba(0,0,0,.2);margin:0 8px;"></div>
        <MudImage Src="Images/Icons/Task/Picture7.png" Alt="Picture7" Width="32" Height="32" />
        <div style="display:flex;flex-direction:column;justify-content:space-between;height:26px;margin:0 8px;">
            <div style="width:4px;height:4px;border-radius:50%;background-color:rgba(0,0,0,.7);"></div>
            <div style="width:4px;height:4px;border-radius:50%;background-color:rgba(0,0,0,.7);"></div>
            <div style="width:4px;height:4px;border-radius:50%;background-color:rgba(0,0,0,.7);"></div>
        </div>
        <span style="font-size:.9rem;font-weight:500;white-space:nowrap;">View</span>
    </div>

    <MudDropContainer T="CardWrap"
                      @ref="_cardContainer"
                      Items="@_cards"
                      ItemsSelector="@((item,column) => item.Column == column)"
                      ItemDropped="OnCardDropped"
                      Style="position:relative;display:flex;align-items:stretch;gap:12px;padding:8px;box-sizing:border-box;height:calc((100vh - 140px)*2/3);overflow-x:auto;">
        <ChildContent>
            <MudDropContainer T="SectionItem"
                              @ref="_sectionContainer"
                              Items="@_sections"
                              ItemsSelector="@((s,slot) => s.Order.ToString() == slot)"
                              ItemDropped="OnSectionDropped"
                              Class="d-flex flex-row"
                              Style="display:flex;align-items:stretch;gap:12px;height:100%;">
                <ChildContent>
                    @for (var i = 0; i < _sections.Count; i++)
                    {
                        <MudDropZone T="SectionItem" Identifier="@i.ToString()" Class="d-flex" />
                    }
                    <div @onclick="OpenAddDialog"
                         style="flex:0 0 280px;width:280px;display:flex;align-items:center;justify-content:center;border:2px dashed rgba(0,0,0,.2);border-radius:12px;background:var(--mud-palette-background);cursor:pointer;height:100%;">
                        <MudIcon Icon="@Icons.Material.Filled.Add" Style="font-size:64px;color:rgba(0,0,0,.3);" />
                    </div>
                </ChildContent>
                <ItemRenderer>
                    <TaskColumn Title="@context.Name"
                                Items="@(context.Items)"
                                BackgroundCss="@context.BackgroundCss"
                                ExpandedWidth="280"
                                CollapsedWidth="64"
                                GlassOnSecond="false"
                                Appear="true"
                                Collapsed="@context.Collapsed"
                                CollapsedChanged="@(v => OnCollapsedChanged(context, v))"
                                AddTaskRequested="OpenAddTaskDialog">
                        <CardsHost>
                            <MudDropZone T="CardWrap" Identifier="@context.Name" Class="mud-height-full" />
                        </CardsHost>
                    </TaskColumn>
                </ItemRenderer>
            </MudDropContainer>
        </ChildContent>
        <ItemRenderer>
            <TaskCard Item="@context.Task" />
        </ItemRenderer>
    </MudDropContainer>
</div>

@code {
    List<TaskItem> InProgressTasks = new()
        {
        new TaskItem { Title = "Execute Related Text for Post for Issue and Fill in Form, Please.", Date = "2024/03/03" },
        new TaskItem { Title = "Execute Related Text for Post for Issue and Fill in Form, Please.", Date = "2024/03/03" }
        };
    List<TaskItem> ToDoTasks = new()
        {
        new TaskItem { Title = "Execute Related Text for Post for Issue and Fill in Form, Please.", Date = "2024/03/03" },
        new TaskItem { Title = "Execute Related Text for Post for Issue and Fill in Form, Please.", Date = "2024/03/03" }
        };
    List<TaskItem> DoneTasks = new()
        {
        new TaskItem { Title = "Execute Related Text for Post for Issue and Fill in Form, Please.", Date = "2024/03/03" },
        new TaskItem { Title = "Execute Related Text for Post for Issue and Fill in Form, Please.", Date = "2024/03/03" }
        };

    MudBlazor.IDialogReference _dialogRef;

    readonly List<string> DotColors = new()
        {
        "#8b5cf6","#3b82f6","#0ea5e9","#10b981","#34d399","#059669","#f59e0b","#f97316","#ef4444","#ec4899","#a78bfa","#a3a3a3","#9ca3af","#6b7280"
        };

    readonly List<string> BackgroundValues = new()
        {
        "rgba(139,92,246,.15)","rgba(59,130,246,.15)","rgba(14,165,233,.15)","rgba(16,185,129,.15)","rgba(52,211,153,.15)","rgba(5,150,105,.15)",
        "rgba(245,158,11,.15)","rgba(249,115,22,.15)","rgba(239,68,68,.15)","rgba(236,72,153,.15)","rgba(167,139,250,.15)","rgba(163,163,163,.15)","rgba(156,163,175,.15)","rgba(107,114,128,.15)"
        };

    RenderFragment TitleFrag => @<div>Add Column</div>;
    RenderFragment TitleFragTask => @<div>Add Task</div>;

    RenderFragment AddColumnBody => @<AddColumnDialog DotColors="DotColors"
                 BackgroundValues="BackgroundValues"
                 OnConfirm="OnAddColumnConfirmed" />;

    RenderFragment AddTaskBody => @<AddTaskDialog OnConfirm="OnAddTaskConfirmed" OnCancel="CloseDialog" />;

    private MudDropContainer<CardWrap> _cardContainer;
    private MudDropContainer<SectionItem> _sectionContainer;
    private List<CardWrap> _cards = new();
    private List<SectionItem> _sections = new();
    private SectionItem _targetSectionForTask;

    protected override void OnInitialized()
    {
        _sections = new()
        {
            new SectionItem { Name="In Progress", BackgroundCss="rgba(245,158,11,.15)", Collapsed=false, Order=0, Items=InProgressTasks.ToList() },
            new SectionItem { Name="To Do", BackgroundCss="rgba(22,163,74,.15)", Collapsed=false, Order=1, Items=ToDoTasks.ToList() },
            new SectionItem { Name="Done", BackgroundCss="var(--mud-palette-action-default)", Collapsed=false, Order=2, Items=DoneTasks.ToList() }
        };

        _cards = InProgressTasks.Select(x => new CardWrap { Task = x, Column = "In Progress" })
                 .Concat(ToDoTasks.Select(x => new CardWrap { Task = x, Column = "To Do" }))
                 .Concat(DoneTasks.Select(x => new CardWrap { Task = x, Column = "Done" }))
                 .ToList();
    }

    async System.Threading.Tasks.Task OpenAddDialog()
    {
        var parameters = new DialogParameters
        {
            { "Title", TitleFrag },
            { "Body", AddColumnBody }
        };
        var options = new DialogOptions { BackgroundClass = "dlg-blur", MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };
        _dialogRef = await DialogService.ShowAsync<Dialog>(string.Empty, parameters, options);
    }

    void OpenAddTaskDialog(string sectionName)
    {
        _targetSectionForTask = _sections.FirstOrDefault(x => x.Name == sectionName);
        if (_targetSectionForTask == null) return;
        var parameters = new DialogParameters
        {
            { "Title", TitleFragTask },
            { "Body", AddTaskBody }
        };
        var options = new DialogOptions { BackgroundClass = "dlg-blur", MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };
        _ = DialogService.ShowAsync<Dialog>(string.Empty, parameters, options).ContinueWith(t => _dialogRef = t.Result);
    }

    async System.Threading.Tasks.Task OnAddColumnConfirmed(AddColumnResult data)
    {
        var newOrder = _sections.Count;
        var newSection = new SectionItem
            {
                Name = data.Title,
                BackgroundCss = string.IsNullOrWhiteSpace(data.Background) ? "var(--mud-palette-action-default)" : data.Background,
                Collapsed = false,
                Order = newOrder,
                Items = new List<TaskItem>(),
                Appear = true
            };

        _sections.Add(newSection);
        _cardContainer.Refresh();
        _dialogRef?.Close(DialogResult.Ok(true));
        await InvokeAsync(StateHasChanged);
    }

    async System.Threading.Tasks.Task OnAddTaskConfirmed(TaskItem item)
    {
        if (_targetSectionForTask == null) return;
        _targetSectionForTask.Items.Add(item);
        _cards.Add(new CardWrap { Task = item, Column = _targetSectionForTask.Name });
        _cardContainer.Refresh();
        _dialogRef?.Close(DialogResult.Ok(true));
        await InvokeAsync(StateHasChanged);
    }

    void CloseDialog()
    {
        _dialogRef?.Close();
    }

    void OnCardDropped(MudItemDropInfo<CardWrap> info)
    {
        info.Item.Column = info.DropzoneIdentifier;
        _cardContainer.Refresh();
    }

    void OnSectionDropped(MudItemDropInfo<SectionItem> info)
    {
        var newIndex = int.Parse(info.DropzoneIdentifier);
        var oldIndex = info.Item.Order;
        if (newIndex == oldIndex) return;

        if (newIndex > oldIndex)
        {
            foreach (var s in _sections.Where(x => x.Order > oldIndex && x.Order <= newIndex))
                s.Order--;
        }
        else
        {
            foreach (var s in _sections.Where(x => x.Order >= newIndex && x.Order < oldIndex))
                s.Order++;
        }

        info.Item.Order = newIndex;
        StateHasChanged();
    }

    void OnCollapsedChanged(SectionItem section, bool value)
    {
        section.Collapsed = value;
        _sectionContainer?.Refresh();
        StateHasChanged();
    }

    public class CardWrap
    {
        public TaskItem Task { get; set; }
        public string Column { get; set; }
    }

    public class SectionItem
    {
        public string Name { get; set; }
        public string BackgroundCss { get; set; }
        public bool Collapsed { get; set; }
        public int Order { get; set; }
        public bool Appear { get; set; }
        public List<TaskItem> Items { get; set; } = new();
    }
}
