@page "/tasks"
@using MudBlazor
@using BlazorApp12.Models
@using BlazorApp12.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Globalization
@inject IDialogService DialogService




    <div class="task-scroll">
        <button type="button"
                @onclick="@(() => SetView(ViewMode.Table))"
                style="font-size:64px;border:none;background:none;color:@(_activeView==ViewMode.Table ? "var(--mud-palette-primary)" : "inherit");">
            <MudIcon Icon="@Icons.Material.Filled.TableChart" />
        </button>
        <button type="button"
                @onclick="@(() => SetView(ViewMode.Cards))"
                style="font-size:64px;border:none;background:none;color:@(_activeView==ViewMode.Cards ? "var(--mud-palette-primary)" : "inherit");">
            <MudIcon Icon="@Icons.Material.Filled.Style" />
        </button>
        <button type="button"
                @onclick="@(() => SetView(ViewMode.Chart))"
                style="font-size:64px;border:none;background:none;color:@(_activeView==ViewMode.Chart ? "var(--mud-palette-primary)" : "inherit");">
            <MudIcon Icon="@Icons.Material.Filled.CandlestickChart" />
        </button>
        <button type="button"
                @onclick="@(() => SetView(ViewMode.Calendar))"
                style="font-size:64px;border:none;background:none;color:@(_activeView==ViewMode.Calendar ? "var(--mud-palette-primary)" : "inherit");">
            <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" />
        </button>
        <div style="width:1px;height:32px;background-color:rgba(0,0,0,.2);margin:0 8px;"></div>
        <button type="button"
                @onclick="@(() => SetView(ViewMode.Excel))"
                style="font-size:64px;border:none;background:none;color:@(_activeView==ViewMode.Excel ? "var(--mud-palette-primary)" : "inherit");">
            <MudIcon Icon="@Icons.Material.Filled.GridOn" />
        </button>
        <div style="display:flex;flex-direction:column;justify-content:space-between;height:26px;margin:0 8px;">
            <div style="width:4px;height:4px;border-radius:50%;background-color:rgba(0,0,0,.7);"></div>
            <div style="width:4px;height:4px;border-radius:50%;background-color:rgba(0,0,0,.7);"></div>
            <div style="width:4px;height:4px;border-radius:50%;background-color:rgba(0,0,0,.7);"></div>
        </div>
        <span style="font-size:.9rem;font-weight:500;white-space:nowrap;">View</span>
    </div>


    @if (_activeView == ViewMode.Cards)
    {
        <!-- نمای کارت‌ها -->
        <div class="cards-container">
            <MudDropContainer T="CardWrap"
                              @ref="_cardContainer"
                              Items="@_cards"
                              ItemsSelector="@((item,column) => item.Column == column)"
                              ItemDropped="OnCardDropped"
                              Class="d-flex"
                              Style="position:relative;display:flex;align-items:stretch;gap:12px;box-sizing:border-box;flex:1;min-height:0;">
                <ChildContent>
                    <MudDropContainer T="SectionItem"
                                      @ref="_sectionContainer"
                                      Items="@_sections"
                                      ItemsSelector="@((s,slot) => s.Order.ToString() == slot)"
                                      ItemDropped="OnSectionDropped"
                                      Class="d-flex flex-row"
                                      Style="display:flex;align-items:stretch;gap:12px;height:100%;min-height:0;">
                        <ChildContent>
                            @for (var i = 0; i < _sections.Count; i++)
                            {
                                <MudDropZone T="SectionItem" Identifier="@i.ToString()" Class="d-flex" Style="@GetSectionWidthCss(i)" />
                            }
                            <div @onclick="OpenAddDialog"
                                 style="flex:0 0 @($"{ExpandedColWidth}px");width:@($"{ExpandedColWidth}px");display:flex;align-items:center;justify-content:center;border:2px dashed rgba(0,0,0,.2);border-radius:12px;background:var(--mud-palette-background);cursor:pointer;height:100%;box-sizing:border-box;min-height:0;">
                                <MudIcon Icon="@Icons.Material.Filled.Add" Style="font-size:64px;color:rgba(0,0,0,.3);" />
                            </div>
                        </ChildContent>
                        <ItemRenderer>
                            <TaskColumn Title="@context.Name"
                                        Items="@(context.Items)"
                                        BackgroundCss="@context.BackgroundCss"
                                        ExpandedWidth="@ExpandedColWidth"
                                        CollapsedWidth="@CollapsedColWidth"
                                        GlassOnSecond="false"
                                        Appear="true"
                                        Collapsed="@context.Collapsed"
                                        CollapsedChanged="@(v => OnCollapsedChanged(context, v))"
                                        AddTaskRequested="OpenAddTaskDialog">
                                <CardsHost>
                                    <MudDropZone T="CardWrap" Identifier="@context.Name" Class="mud-height-full" Style="width:100%;height:100%;" />
                                </CardsHost>
                            </TaskColumn>
                        </ItemRenderer>
                    </MudDropContainer>
                </ChildContent>
                <ItemRenderer>
                    <TaskCard Item="@context.Task" />
                </ItemRenderer>
            </MudDropContainer>
        </div>
    }
    else if (_activeView == ViewMode.Table)
    {
        <!-- نمای جدول -->
        <div class="table-wrapper">
            <DynamicTable />
        </div>
    }
    else
    {
        <div class="table-wrapper">
            <div class="table-inner">
            @* <DynamicTable /> *@
            </div>
        </div>
    }


@code {
    enum ViewMode { Table, Cards, Chart, Calendar, Excel }
    private ViewMode _activeView = ViewMode.Table;
    void SetView(ViewMode vm) => _activeView = vm;

    const int ExpandedColWidth = 280;
    const int CollapsedColWidth = 64;

    List<TaskItem> InProgressTasks = new()
        {
        new TaskItem { Title = "Task A", Date = "2024/03/03", Status = "In Progress" },
        new TaskItem { Title = "Task B", Date = "2024/03/05", Status = "In Progress" }
        };
    List<TaskItem> ToDoTasks = new()
        {
        new TaskItem { Title = "Task C", Date = "2024/03/01", Status = "To Do" },
        new TaskItem { Title = "Task D", Date = "2024/03/10", Status = "To Do" }
        };
    List<TaskItem> DoneTasks = new()
        {
        new TaskItem { Title = "Task E", Date = "2024/02/28", Status = "Done" },
        new TaskItem { Title = "Task F", Date = "2024/04/01", Status = "Done" }
        };

    private List<TaskItem> _allTasks = new();

    MudBlazor.IDialogReference _dialogRef;

    readonly List<string> DotColors = new()
        {
        "#8b5cf6","#3b82f6","#0ea5e9","#10b981","#34d399","#059669",
        "#f59e0b","#f97316","#ef4444","#ec4899","#a78bfa","#a3a3a3","#9ca3af","#6b7280"
        };

    readonly List<string> BackgroundValues = new()
        {
        "rgba(139,92,246,.15)","rgba(59,130,246,.15)","rgba(14,165,233,.15)",
        "rgba(16,185,129,.15)","rgba(52,211,153,.15)","rgba(5,150,105,.15)",
        "rgba(245,158,11,.15)","rgba(249,115,22,.15)","rgba(239,68,68,.15)",
        "rgba(236,72,153,.15)","rgba(167,139,250,.15)","rgba(163,163,163,.15)",
        "rgba(156,163,175,.15)","rgba(107,114,128,.15)"
        };

    RenderFragment TitleFrag => @<div>Add Column</div>;
    RenderFragment TitleFragTask => @<div>Add Task</div>;

    RenderFragment AddColumnBody => @<AddColumnDialog DotColors="DotColors" BackgroundValues="BackgroundValues" OnConfirm="OnAddColumnConfirmed" />;
    RenderFragment AddTaskBody => @<AddTaskDialog OnConfirm="OnAddTaskConfirmed" OnCancel="CloseDialog" />;

    private MudDropContainer<CardWrap> _cardContainer;
    private MudDropContainer<SectionItem> _sectionContainer;
    private List<CardWrap> _cards = new();
    private List<SectionItem> _sections = new();
    private SectionItem _targetSectionForTask;

    protected override void OnInitialized()
    {
        _sections = new()
        {
            new SectionItem { Name="In Progress", BackgroundCss="rgba(245,158,11,.15)", Collapsed=false, Order=0, Items=InProgressTasks.ToList() },
            new SectionItem { Name="To Do", BackgroundCss="rgba(22,163,74,.15)", Collapsed=false, Order=1, Items=ToDoTasks.ToList() },
            new SectionItem { Name="Done", BackgroundCss="var(--mud-palette-action-default)", Collapsed=false, Order=2, Items=DoneTasks.ToList() }
        };

        _cards = InProgressTasks.Select(x => new CardWrap { Task = x, Column = "In Progress" })
                 .Concat(ToDoTasks.Select(x => new CardWrap { Task = x, Column = "To Do" }))
                 .Concat(DoneTasks.Select(x => new CardWrap { Task = x, Column = "Done" }))
                 .ToList();

        RebuildAllTasks();
    }

    void RebuildAllTasks()
    {
        _allTasks = _sections.SelectMany(s => s.Items).ToList();
        StateHasChanged();
    }

    async System.Threading.Tasks.Task OpenAddDialog()
    {
        var parameters = new DialogParameters { { "Title", TitleFrag }, { "Body", AddColumnBody } };
        var options = new DialogOptions { BackgroundClass = "dlg-blur", MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };
        _dialogRef = await DialogService.ShowAsync<Dialog>(string.Empty, parameters, options);
    }

    void OpenAddTaskDialog(string sectionName)
    {
        _targetSectionForTask = _sections.FirstOrDefault(x => x.Name == sectionName);
        if (_targetSectionForTask == null) return;
        var parameters = new DialogParameters { { "Title", TitleFragTask }, { "Body", AddTaskBody } };
        var options = new DialogOptions { BackgroundClass = "dlg-blur", MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true };
        _ = DialogService.ShowAsync<Dialog>(string.Empty, parameters, options).ContinueWith(t => _dialogRef = t.Result);
    }

    async System.Threading.Tasks.Task OnAddColumnConfirmed(AddColumnResult data)
    {
        var newOrder = _sections.Count;
        var newSection = new SectionItem
            {
                Name = data.Title,
                BackgroundCss = string.IsNullOrWhiteSpace(data.Background) ? "var(--mud-palette-action-default)" : data.Background,
                Collapsed = false,
                Order = newOrder,
                Items = new List<TaskItem>(),
                Appear = true
            };

        _sections.Add(newSection);
        _cardContainer.Refresh();
        _dialogRef?.Close(DialogResult.Ok(true));
        RebuildAllTasks();
        await InvokeAsync(StateHasChanged);
    }

    async System.Threading.Tasks.Task OnAddTaskConfirmed(TaskItem item)
    {
        if (_targetSectionForTask == null) return;
        if (string.IsNullOrWhiteSpace(item.Status))
            item.Status = _targetSectionForTask.Name == "Done" ? "Done" : (_targetSectionForTask.Name == "To Do" ? "To Do" : "In Progress");
        _targetSectionForTask.Items.Add(item);
        _cards.Add(new CardWrap { Task = item, Column = _targetSectionForTask.Name });
        _cardContainer.Refresh();
        _dialogRef?.Close(DialogResult.Ok(true));
        RebuildAllTasks();
        await InvokeAsync(StateHasChanged);
    }

    void CloseDialog() => _dialogRef?.Close();

    void OnCardDropped(MudItemDropInfo<CardWrap> info)
    {
        info.Item.Column = info.DropzoneIdentifier;
        _cardContainer.Refresh();
    }

    void OnSectionDropped(MudItemDropInfo<SectionItem> info)
    {
        var newIndex = int.Parse(info.DropzoneIdentifier);
        var oldIndex = info.Item.Order;
        if (newIndex == oldIndex) return;

        if (newIndex > oldIndex)
        {
            foreach (var s in _sections.Where(x => x.Order > oldIndex && x.Order <= newIndex))
                s.Order--;
        }
        else
        {
            foreach (var s in _sections.Where(x => x.Order >= newIndex && x.Order < oldIndex))
                s.Order++;
        }

        info.Item.Order = newIndex;
        StateHasChanged();
    }

    void OnCollapsedChanged(SectionItem section, bool value)
    {
        section.Collapsed = value;
        _sectionContainer?.Refresh();
        _cardContainer?.Refresh();
        StateHasChanged();
    }

    private string GetSectionWidthCss(int index)
    {
        if (index < 0 || index >= _sections.Count)
            return $"flex:0 0 {ExpandedColWidth}px;width:{ExpandedColWidth}px;height:100%;box-sizing:border-box;";
        var s = _sections[index];
        var w = s.Collapsed ? CollapsedColWidth : ExpandedColWidth;
        return $"flex:0 0 {w}px;width:{w}px;height:100%;box-sizing:border-box;";
    }

    public class CardWrap
    {
        public TaskItem Task { get; set; }
        public string Column { get; set; }
    }
    public class SectionItem
    {
        public string Name { get; set; }
        public string BackgroundCss { get; set; }
        public bool Collapsed { get; set; }
        public int Order { get; set; }
        public bool Appear { get; set; }
        public List<TaskItem> Items { get; set; } = new();
    }

    private string TaskRowColor(TaskItem item)
    {
        if (!DateTime.TryParseExact(item.Date, "yyyy/MM/dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out var d))
            return string.Empty;
        var now = DateTime.Now.Date;
        if (d.Date < now) return "#fee2e2";
        if (d.Date <= now.AddDays(3)) return "#fef9c3";
        return "#d1fae5";
    }

    private string RowColor(TaskItem t) => t.Status switch
    {
        "Done" => "rgba(16,185,129,.25)",
        "In Progress" => "rgba(245,158,11,.25)",
        "To Do" => "rgba(239,68,68,.25)",
        _ => string.Empty
    };
}
