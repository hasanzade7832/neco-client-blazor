@page "/test2"
@using MudBlazor
@using System.Linq
@using System.Reflection

<style>
  


</style>

<MudDataGrid @ref="DataGrid"
             T="Item"
             Items="@_items"
             SortMode="SortMode.Multiple"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
             QuickFilter="@QuickFilter"
             Hover="true"
             Bordered="true"
             RowStyleFunc="@_rowStyleFunc"
             RowClassFunc="@_rowClassFunc"
             @bind-PageSize="_pageSize"
             @bind-Page="_page"
             Class="flex-grow-1"
             Style="height:100%;">

    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString"
                      Immediate="true"
                      Placeholder="جست‌وجو..."
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="mt-0"
                      Style="width:50%; margin-right:4px;" />
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Name"
                        Title="Name"
                        Sortable="true"
                        Comparer="@(new MudBlazor.Utilities.NaturalComparer())" />
        <PropertyColumn Property="x => x.Value"
                        Title="Value"
                        Sortable="true" />
        <PropertyColumn Property="x => x.Misc"
                        Title="Misc"
                        Sortable="true" />
    </Columns>

    <PagerContent>
        <MudDataGridPager T="Item"
                          @bind-Page="_page"
                          @bind-PageSize="_pageSize"
                          PageSizeOptions="new int[]{5,10,15,20}"
                          RowsPerPageString="ردیف در صفحه" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<Item> DataGrid;
    private int _page = 0;
    private int _pageSize = 5;
    private string _searchString = string.Empty;
    private string Title = "Data";

    private IEnumerable<Item> _items;

    protected override void OnInitialized()
    {
        _items = Enumerable.Range(1, 100).Select(i => new Item(i.ToString(), i % 100, $"M{i}")).ToList();
    }

    private Func<Item, bool> QuickFilter => item =>
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        foreach (PropertyInfo p in typeof(Item).GetProperties())
        {
            var val = p.GetValue(item)?.ToString() ?? string.Empty;
            if (val.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;
        }
        return false;
    };

    private Func<Item, int, string> _rowStyleFunc => (x, i) =>
    {
        if ((i + 1) % 4 == 0)
            return "background-color:#FFFFFF;--mud-palette-text-primary:#0F172A;color:#0F172A";
        if (x.Value >= 70)
            return "background-color:rgba(var(--mud-palette-success-rgb),0.18);color:var(--mud-palette-text-primary)";
        if (x.Value >= 40)
            return "background-color:rgba(var(--mud-palette-warning-rgb),0.18);color:var(--mud-palette-text-primary)";
        return "background-color:rgba(var(--mud-palette-error-rgb),0.18);color:var(--mud-palette-text-primary)";
    };

    private Func<Item, int, string> _rowClassFunc => (x, i) =>
    {
        if ((i + 1) % 4 == 0)
            return "white-row";
        return null;
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && DataGrid is not null)
        {
            await DataGrid.SetSortAsync(nameof(Item.Name),
                                        SortDirection.Ascending,
                                        x => x.Name,
                                        new MudBlazor.Utilities.NaturalComparer());
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public class Item
    {
        public string Name { get; set; }
        public int Value { get; set; }
        public string Misc { get; set; }
        public Item(string name, int value, string misc)
        {
            Name = name;
            Value = value;
            Misc = misc;
        }
    }
}
