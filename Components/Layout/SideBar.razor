@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop

<style>
    .sidebar.collapsed .nav-mini {
        position: relative;
        display: block !important;
        width: 56px;
        height: 56px;
        padding: 0 !important;
        margin: 0 !important
    }

        .sidebar.collapsed .nav-mini .centerer {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            pointer-events: none
        }

        .sidebar.collapsed .nav-mini .mud-icon-root {
            margin: 0 !important
        }
</style>

<div class="@($"sidebar {(_isOpen ? "expanded" : "collapsed")}")"
     style="@($"position: fixed; top: 0; left: 0; height: 100vh; width: {(_isOpen ? "250px" : "56px")}; background: #e1e1e1; z-index: 9999; padding-top: 16px; box-shadow: 0 0 10px rgba(0,0,0,0.1); transition: width 0.3s; overflow: hidden;")"
     dir="ltr">
    <div class="@(_isOpen ? "flex items-center justify-start px-4 mb-4" : "flex items-center justify-center px-0 mb-2")">
        <img src="images/Icons/Menu.png"
             alt="Menu"
             width="32"
             height="32"
             class="cursor-pointer"
             @onclick="ToggleSidebar" />
    </div>

    @if (_isOpen)
    {
        <hr class="mx-4 my-2" />
    }

    <MudStack Spacing="@ItemSpacing" Class="@(_isOpen ? "px-4 items-stretch" : "px-0 items-center")">
        @foreach (var item in _items)
        {
            @if (_isOpen)
            {
                <MudNavLink Href="@item.Href"
                            Class="flex items-center gap-4 px-3 py-2 rounded hover:bg-gray-200 transition-colors">
                    <MudIcon Icon="@item.Icon" Size="Size.Medium" />
                    <span class="text-gray-800 hover:text-black">@item.Text</span>
                </MudNavLink>
            }
            else
            {
                <MudTooltip Text="@item.Text" Placement="Placement.Right">
                    <MudNavLink Href="@item.Href"
                                Class="nav-mini rounded hover:bg-gray-200 transition-colors">
                        <div class="centerer">
                            <MudIcon Icon="@item.Icon" Size="Size.Medium" />
                        </div>
                    </MudNavLink>
                </MudTooltip>
            }
        }
    </MudStack>
</div>

<script>
    function sidebarResizeInit(dotnet){function r(){dotnet.invokeMethodAsync('OnResize', window.innerWidth);} window.addEventListener('resize', r); r();}
</script>

@code {
    private bool _isOpen = true;

    private readonly (string Icon, string Text, string Href)[] _items = new[]
    {
        (Icons.Material.Filled.Home,         "Home",        "#"),
        (Icons.Material.Filled.Workspaces,   "Outsourcing", "#"),
        (Icons.Material.Filled.Engineering,  "Engineering", "#"),
        (Icons.Material.Filled.ShoppingCart, "Procurement", "#"),
        (Icons.Material.Filled.Build,        "Construction","#"),
    };

    [Parameter]
    public EventCallback<bool> OnSidebarToggled { get; set; }

    [Inject] private IJSRuntime JS { get; set; }

    private int ItemSpacing => _isOpen ? 4 : 2;

    private async Task ToggleSidebar()
    {
        _isOpen = !_isOpen;
        await OnSidebarToggled.InvokeAsync(_isOpen);
    }

    private DotNetObjectReference<SideBar> _objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("sidebarResizeInit", _objRef);
        }
    }

    [JSInvokable]
    public async Task OnResize(int width)
    {
        var target = width >= 1024;
        if (_isOpen != target)
        {
            _isOpen = target;
            await OnSidebarToggled.InvokeAsync(_isOpen);
            StateHasChanged();
        }
    }
}
